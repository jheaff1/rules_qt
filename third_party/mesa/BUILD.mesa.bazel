load("@pip//:requirements.bzl", "requirement")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "meson_with_requirements")

filegroup(
    name = "all_srcs",
    srcs = glob(["**"]),
)

config_setting(
    name = "msvc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
)

meson_with_requirements(
    name = "mesa",
    build_args = select({
        # Prevent parallel builds on when using winflexbison, due to issue https://github.com/lexxmark/winflexbison/issues/86
        "@bazel_tools//src/conditions:host_windows": ["-j 1"],
        "//conditions:default": [],
    }),
    build_data = select({
        "@bazel_tools//src/conditions:host_windows": ["@winflexbison//:gen_dir"],
        "//conditions:default": [
            "@bison//:gen_dir",
            "@flex//:flex_exe",
            # "@llvm", # llvm_config requires the lib dir generated by the llvm build
            # "@llvm//:llvm_config",
            "@m4//:m4_exe",
        ],
    }),
    # this prevents the output directory being "mesa_", as meson_with_requirements defines the target to build as "mesa_"
    lib_name = "mesa",
    env = select({
        "@bazel_tools//src/conditions:host_windows": {
            "PATH": "$$(dirname $$EXT_BUILD_ROOT$$/$(location @winflexbison//:gen_dir))/winflexbison:$$(dirname $$EXT_BUILD_ROOT$$/$(PYTHON3)):$$PATH",
        },
        "//conditions:default": {
            "BISON_PKGDATADIR": "$$(dirname $$EXT_BUILD_ROOT$$/$(location @bison//:gen_dir))/bison/share/bison",
            "M4": "$$EXT_BUILD_ROOT$$/$(location @m4//:m4_exe)",
            "PATH": "$$(dirname $$EXT_BUILD_ROOT$$/$(location @bison//:gen_dir))/bison/bin:$$(dirname $$EXT_BUILD_ROOT$$/$(location @flex//:flex_exe)):$$EXT_BUILD_DEPS$$/bin/m4/bin/:$$(dirname $$EXT_BUILD_ROOT$$/$(PYTHON3)):$$PATH",
            "CMAKE_PREFIX_PATH": "$$EXT_BUILD_DEPS$$/llvm/lib/cmake/llvm",
        },
    }),
    options = select({
        "@platforms//os:linux": {
            "shared-llvm": "disabled", 
            "cpp_rtti": "false",  # Required because LVVM is built with LLVM_ENABLE_RTTI=OFF by default
            "platforms": "x11",
        },
        "//conditions:default": {},
    }),
    lib_source = ":all_srcs",
    out_interface_libs = select({
        ":msvc_compiler": [
            "libgallium_wgl.lib",
            "opengl32.lib",
        ],
        "//conditions:default": [],
    }),
    out_lib_dir = select({
        "@platforms//os:linux": "lib/x86_64-linux-gnu",
        "//conditions:default": "lib",
    }),
    out_shared_libs = select({
        ":msvc_compiler": [
            "libgallium_wgl.dll",
            "opengl32.dll",
        ],
        "@platforms//os:linux": [
            "dri/crocus_dri.so",
            "dri/i915_dri.so",
            "dri/iris_dri.so",
            "dri/kms_swrast_dri.so",
            "dri/nouveau_dri.so",
            "dri/r300_dri.so",
            "dri/r600_dri.so",
            "dri/radeonsi_dri.so",
            "dri/swrast_dri.so",
            "dri/virtio_gpu_dri.so",
            "dri/vmwgfx_dri.so",
            "libEGL.so",
            "libEGL.so.1",
            "libEGL.so.1.0.0",
            "libgbm.so",
            "libgbm.so.1",
            "libgbm.so.1.0.0",
            "libGL.so",
            "libGL.so.1",
            "libGL.so.1.2.0",
            "libglapi.so",
            "libglapi.so.0",
            "libglapi.so.0.0.0",
            "libGLESv1_CM.so",
            "libGLESv1_CM.so.1",
            "libGLESv1_CM.so.1.1.0",
            "libGLESv2.so",
            "libGLESv2.so.2",
            "libGLESv2.so.2.0.0",
            "libvulkan_intel.so",
            "libvulkan_lvp.so",
            "libvulkan_radeon.so",
            "libxatracker.so",
            "libxatracker.so.2",
            "libxatracker.so.2.5.0",
        ],
        "@platforms//os:macos": [
            "libGLESv1_CM.1.dylib",
            "libGL.dylib",
            "libGLESv1_CM.dylib",
            "libglapi.0.dylib",
            "libglapi.dylib",
            "libGLESv2.2.dylib",
            "libGL.1.dylib",
            "libGLESv2.dylib",
        ],
    }),
    requirements = [
        requirement("mako"),
    ],
    # TODO - i added this as llvm-config had a segmentation fault.
    tags = ["no-sandbox"],
    toolchains = ["@rules_python//python:current_py_toolchain"],
    visibility = ["//visibility:public"],
    deps = select({
        "@platforms//os:linux": [
            "@bison",
            "@expat",
            "@libdrm",
            "@libelf",
            "@libpciaccess",
            "@libxau",
            "@libxcb",
            "@libxdmcp",
            "@libxext",
            "@libxrandr",
            "@libxrender",
            "@libxshmfence",
            "@libXxf86vm",
            "@libx11",
            "@llvm",
            "@xorgproto",
            "@zlib",
        ],
        "@platforms//os:macos": [
            "@libxext",
            "@libxfixes",
            "@libx11",
            "@zlib",
        ],
        "@platforms//os:windows": [
            "@zlib",
        ],
    }),
)
